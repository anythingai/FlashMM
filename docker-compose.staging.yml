# FlashMM Staging Environment Docker Compose
# Production-like environment for pre-deployment testing and validation

version: '3.8'

services:
  # =============================================================================
  # FlashMM Application - Staging Configuration
  # =============================================================================
  flashmm:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        BUILD_VERSION: ${BUILD_VERSION:-staging}
        GIT_COMMIT: ${GIT_COMMIT:-$(git rev-parse HEAD)}
    image: ${REGISTRY:-ghcr.io}/flashmm/flashmm:${TAG:-staging}
    container_name: flashmm-staging
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=staging
      - FLASHMM_DEBUG=false
      - FLASHMM_LOG_LEVEL=INFO
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - INFLUXDB_URL=http://influxdb:8086
      - GRAFANA_URL=http://grafana:3000
      - PROMETHEUS_URL=http://prometheus:9090
    env_file:
      - .env.staging
    volumes:
      - staging_logs:/app/logs
      - staging_data:/app/data
      - staging_models:/app/models
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - flashmm-staging
      - monitoring
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/detailed"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flashmm-staging.rule=Host(`staging.flashmm.com`)"
      - "traefik.http.routers.flashmm-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.flashmm-staging.loadbalancer.server.port=8000"
      - "traefik.http.routers.flashmm-staging.middlewares=auth-staging"

  # =============================================================================
  # Redis - Staging Configuration with Persistence
  # =============================================================================
  redis:
    image: redis:7.2-alpine
    container_name: flashmm-redis-staging
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 60
      --timeout 0
    volumes:
      - redis_staging_data:/data
      - ./config/redis/redis-staging.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - flashmm-staging
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=false"

  # =============================================================================
  # InfluxDB - Staging Configuration with Backup
  # =============================================================================
  influxdb:
    image: influxdb:2.7-alpine
    container_name: flashmm-influxdb-staging
    restart: unless-stopped
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=flashmm-staging
      - DOCKER_INFLUXDB_INIT_BUCKET=metrics
      - DOCKER_INFLUXDB_INIT_RETENTION=30d
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXD_LOG_LEVEL=warn
    volumes:
      - influxdb_staging_data:/var/lib/influxdb2
      - influxdb_staging_config:/etc/influxdb2
      - ./config/influxdb/staging-init.sh:/docker-entrypoint-initdb.d/init.sh:ro
      - ./backups/influxdb:/backups
    networks:
      - flashmm-staging
      - monitoring
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.influxdb-staging.rule=Host(`influxdb-staging.flashmm.com`)"
      - "traefik.http.routers.influxdb-staging.tls.certresolver=letsencrypt"
      - "traefik.http.routers.influxdb-staging.middlewares=auth-staging"

  # =============================================================================
  # PostgreSQL - Persistent Storage for Application Data
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: flashmm-postgres-staging
    restart: unless-stopped
    environment:
      - POSTGRES_DB=flashmm_staging
      - POSTGRES_USER=flashmm
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./config/postgres/init-staging.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups/postgres:/backups
    networks:
      - flashmm-staging
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flashmm -d flashmm_staging"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "traefik.enable=false"

  # =============================================================================
  # Grafana - Staging Dashboard and Monitoring
  # =============================================================================
  grafana:
    image: grafana/grafana:10.2.0
    container_name: flashmm-grafana-staging
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_LOG_LEVEL=warn
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana_staging
      - GF_DATABASE_USER=grafana
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_PASSWORD}
      - GF_SESSION_PROVIDER=postgres
      - GF_SESSION_PROVIDER_CONFIG=user=grafana password=${GRAFANA_DB_PASSWORD} host=postgres port=5432 dbname=grafana_staging sslmode=disable
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - flashmm-staging
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana-staging.rule=Host(`grafana-staging.flashmm.com`)"
      - "traefik.http.routers.grafana-staging.tls.certresolver=letsencrypt"

  # =============================================================================
  # Nginx - Reverse Proxy and Static Content
  # =============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: flashmm-nginx-staging
    restart: unless-stopped
    volumes:
      - ./config/nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./static:/usr/share/nginx/html/static:ro
      - nginx_staging_cache:/var/cache/nginx
      - nginx_staging_logs:/var/log/nginx
    depends_on:
      - flashmm
    networks:
      - flashmm-staging
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx-staging.rule=Host(`cdn-staging.flashmm.com`)"
      - "traefik.http.routers.nginx-staging.tls.certresolver=letsencrypt"

  # =============================================================================
  # Backup Service - Automated Backups
  # =============================================================================
  backup:
    image: alpine:3.18
    container_name: flashmm-backup-staging
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - RETENTION_DAYS=30
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./scripts/backup:/scripts:ro
      - ./backups:/backups
      - postgres_staging_data:/data/postgres:ro
      - influxdb_staging_data:/data/influxdb:ro
      - redis_staging_data:/data/redis:ro
    command: >
      sh -c "
        apk add --no-cache curl postgresql-client aws-cli &&
        crond -f -d 8 -c /scripts/crontab
      "
    depends_on:
      - postgres
      - influxdb
      - redis
    networks:
      - flashmm-staging
    labels:
      - "traefik.enable=false"

# =============================================================================
# Volumes
# =============================================================================
volumes:
  redis_staging_data:
    driver: local
  influxdb_staging_data:
    driver: local
  influxdb_staging_config:
    driver: local
  postgres_staging_data:
    driver: local
  grafana_staging_data:
    driver: local
  nginx_staging_cache:
    driver: local
  nginx_staging_logs:
    driver: local
  staging_logs:
    driver: local
  staging_data:
    driver: local
  staging_models:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  flashmm-staging:
    driver: bridge
    name: flashmm-staging-network
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/16
          gateway: 172.22.0.1
    labels:
      - "com.docker.compose.project=flashmm-staging"
  
  monitoring:
    external: true
    name: monitoring-network