# FlashMM CI/CD Pipeline
# Comprehensive continuous integration and deployment workflow

name: FlashMM CI/CD

on:
  push:
    branches: [main, develop, 'release/*']
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip tests)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'
  HELM_VERSION: '3.13.0'
  KUBECTL_VERSION: '1.28.0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # Code Quality and Security Checks
  # =============================================================================
  
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      python-cache-key: ${{ steps.cache-key.outputs.python }}
      should-build: ${{ steps.changes.outputs.code }}
      should-deploy: ${{ steps.changes.outputs.deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            code:
              - 'src/**'
              - 'tests/**'
              - 'requirements.txt'
              - 'pyproject.toml'
              - 'Dockerfile*'
            deploy:
              - 'k8s/**'
              - 'helm/**'
              - 'terraform/**'
              - '.github/workflows/**'
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Generate cache key
        id: cache-key
        run: |
          echo "python=${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt', 'pyproject.toml') }}" >> $GITHUB_OUTPUT
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
          key: ${{ steps.cache-key.outputs.python }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
      
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --with dev,test
      
      - name: Lint code
        run: |
          ruff check src/ tests/ --output-format=github
          black --check src/ tests/
          isort --check-only src/ tests/
      
      - name: Type checking
        run: mypy src/
      
      - name: Security scan - Bandit
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Security scan - Safety
        run: safety check --json --output safety-report.json
        continue-on-error: true
      
      - name: Security scan - Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
          generateSarif: "1"
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep.sarif
          retention-days: 30

  # =============================================================================
  # Unit and Integration Tests
  # =============================================================================
  
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.should-build == 'true' || github.event.inputs.force_deploy != 'true'
    
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: flashmm_test
          POSTGRES_USER: flashmm
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      influxdb:
        image: influxdb:2.7-alpine
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: admin
          DOCKER_INFLUXDB_INIT_PASSWORD: test_password
          DOCKER_INFLUXDB_INIT_ORG: flashmm-test
          DOCKER_INFLUXDB_INIT_BUCKET: metrics
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: test_token
        ports:
          - 8086:8086
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
          key: ${{ needs.code-quality.outputs.python-cache-key }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
      
      - name: Install Poetry and dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
          poetry install --with dev,test
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v \
            --cov=src/flashmm \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=80 \
            --junitxml=junit-unit.xml
        env:
          ENVIRONMENT: test
          REDIS_URL: redis://localhost:6379/0
          POSTGRES_URL: postgresql://flashmm:test_password@localhost:5432/flashmm_test
          INFLUXDB_URL: http://localhost:8086
          INFLUXDB_TOKEN: test_token
      
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v \
            --junitxml=junit-integration.xml
        env:
          ENVIRONMENT: test
          REDIS_URL: redis://localhost:6379/0
          POSTGRES_URL: postgresql://flashmm:test_password@localhost:5432/flashmm_test
          INFLUXDB_URL: http://localhost:8086
          INFLUXDB_TOKEN: test_token
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            junit-*.xml
            htmlcov/
            coverage.xml
          retention-days: 30
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # =============================================================================
  # Performance and Load Testing
  # =============================================================================
  
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.ref == 'refs/heads/main' && needs.code-quality.outputs.should-build == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install locust pytest-benchmark
      
      - name: Run performance benchmarks
        run: |
          pytest tests/performance/ -v \
            --benchmark-json=benchmark-results.json \
            --benchmark-min-rounds=5
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: benchmark-results.json
          retention-days: 30

  # =============================================================================
  # Container Image Build and Scan
  # =============================================================================
  
  build-image:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: needs.code-quality.outputs.should-build == 'true' || github.event_name == 'workflow_dispatch'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.production
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            GIT_COMMIT=${{ github.sha }}
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # Infrastructure Validation
  # =============================================================================
  
  validate-infrastructure:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.should-deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Format Check
        run: terraform fmt -check -recursive terraform/
      
      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: terraform
      
      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform
      
      - name: Terraform Plan (Staging)
        run: |
          terraform plan \
            -var="environment=staging" \
            -var="cloud_provider=aws" \
            -var="flashmm_image_tag=${{ github.sha }}" \
            -out=staging.tfplan
        working-directory: terraform
        env:
          TF_VAR_cambrian_api_key: ${{ secrets.CAMBRIAN_API_KEY }}
          TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
      
      - name: Upload Terraform plans
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plans
          path: terraform/*.tfplan
          retention-days: 30

  # =============================================================================
  # Deploy to Staging
  # =============================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-image, validate-infrastructure]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-api.flashmm.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Deploy infrastructure
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="environment=staging" \
            -var="cloud_provider=aws" \
            -var="flashmm_image_tag=${{ needs.build-image.outputs.image-digest }}" \
            -var="flashmm_replica_count=2"
        working-directory: terraform
        env:
          TF_VAR_cambrian_api_key: ${{ secrets.CAMBRIAN_API_KEY }}
          TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
          TF_VAR_backup_bucket_name: ${{ vars.BACKUP_BUCKET_NAME }}
      
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name flashmm-staging
      
      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/flashmm-app -n flashmm --timeout=600s
      
      - name: Run smoke tests
        run: |
          kubectl run smoke-test --rm -i --restart=Never --image=curlimages/curl -- \
            curl -f http://flashmm-app:8000/health
      
      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Staging deployment failed"
            exit 1
          fi

  # =============================================================================
  # Deploy to Production
  # =============================================================================
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-image, validate-infrastructure, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://api.flashmm.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ vars.AWS_REGION_PROD }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Deploy infrastructure
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="environment=production" \
            -var="cloud_provider=aws" \
            -var="flashmm_image_tag=${{ needs.build-image.outputs.image-digest }}" \
            -var="flashmm_replica_count=3" \
            -var="monitoring_enabled=true" \
            -var="backup_enabled=true"
        working-directory: terraform
        env:
          TF_VAR_cambrian_api_key: ${{ secrets.CAMBRIAN_API_KEY_PROD }}
          TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD_PROD }}
          TF_VAR_backup_bucket_name: ${{ vars.BACKUP_BUCKET_NAME_PROD }}
          TF_VAR_slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          TF_VAR_pagerduty_integration_key: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}
      
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION_PROD }} --name flashmm-production
      
      - name: Blue-Green deployment
        run: |
          # Deploy new version alongside current
          kubectl patch deployment flashmm-app -n flashmm -p '{"spec":{"replicas":6}}'
          kubectl rollout status deployment/flashmm-app -n flashmm --timeout=600s
          
          # Wait for health checks
          sleep 60
          
          # Scale down to original replica count
          kubectl patch deployment flashmm-app -n flashmm -p '{"spec":{"replicas":3}}'
      
      - name: Run production health checks
        run: |
          # Comprehensive health check
          kubectl run health-check --rm -i --restart=Never --image=curlimages/curl -- \
            curl -f http://flashmm-app:8000/health/detailed
          
          # Check metrics endpoint
          kubectl run metrics-check --rm -i --restart=Never --image=curlimages/curl -- \
            curl -f http://flashmm-app:8000/metrics
      
      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 FlashMM production deployment successful!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '🚨 FlashMM production deployment failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # Post-Deployment Validation
  # =============================================================================
  
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always() && needs.deploy-staging.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install test dependencies
        run: |
          pip install pytest requests
      
      - name: Run end-to-end tests
        run: |
          pytest tests/e2e/ -v \
            --base-url=https://staging-api.flashmm.com
        env:
          API_KEY: ${{ secrets.STAGING_API_KEY }}
      
      - name: Performance monitoring
        run: |
          # Run basic performance test against staging
          curl -w "@tests/performance/curl-format.txt" \
               -o /dev/null -s \
               https://staging-api.flashmm.com/health