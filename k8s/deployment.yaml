# FlashMM Kubernetes Deployment
# Main application deployment with high availability and auto-scaling

apiVersion: apps/v1
kind: Deployment
metadata:
  name: flashmm-app
  namespace: flashmm
  labels:
    app: flashmm
    app.kubernetes.io/name: flashmm
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: flashmm-platform
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: flashmm
      app.kubernetes.io/name: flashmm
  template:
    metadata:
      labels:
        app: flashmm
        app.kubernetes.io/name: flashmm
        app.kubernetes.io/component: application
        app.kubernetes.io/part-of: flashmm-platform
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
        config.alpha.kubernetes.io/reload: "true"
    spec:
      serviceAccountName: flashmm
      imagePullSecrets:
        - name: registry-secret
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: flashmm
          image: ghcr.io/flashmm/flashmm:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 8000
              protocol: TCP
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          envFrom:
            - configMapRef:
                name: flashmm-config
            - secretRef:
                name: flashmm-secrets
          volumeMounts:
            - name: logs
              mountPath: /app/logs
            - name: data
              mountPath: /app/data
            - name: models
              mountPath: /app/models
            - name: config
              mountPath: /app/config/k8s
              readOnly: true
            - name: tmp
              mountPath: /tmp
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
              ephemeral-storage: "1Gi"
            limits:
              memory: "4Gi"
              cpu: "2"
              ephemeral-storage: "5Gi"
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 30
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10001
            capabilities:
              drop:
                - ALL
      volumes:
        - name: logs
          emptyDir:
            sizeLimit: 10Gi
        - name: data
          persistentVolumeClaim:
            claimName: flashmm-data-pvc
        - name: models
          persistentVolumeClaim:
            claimName: flashmm-models-pvc
        - name: config
          configMap:
            name: flashmm-config
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - flashmm
                topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
                      - arm64
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
# Redis Master Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flashmm-redis-master
  namespace: flashmm
  labels:
    app: redis
    role: master
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: flashmm-platform
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: redis
      role: master
  template:
    metadata:
      labels:
        app: redis
        role: master
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "6379"
    spec:
      containers:
        - name: redis
          image: redis:7.2-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flashmm-secrets
                  key: REDIS_PASSWORD
          command:
            - redis-server
          args:
            - /etc/redis/redis.conf
            - --requirepass
            - $(REDIS_PASSWORD)
            - --masterauth
            - $(REDIS_PASSWORD)
          volumeMounts:
            - name: redis-config
              mountPath: /etc/redis
              readOnly: true
            - name: redis-data
              mountPath: /data
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1"
          livenessProbe:
            exec:
              command:
                - redis-cli
                - --no-auth-warning
                - -a
                - $(REDIS_PASSWORD)
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - redis-cli
                - --no-auth-warning
                - -a
                - $(REDIS_PASSWORD)
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
      volumes:
        - name: redis-config
          configMap:
            name: redis-config
            items:
              - key: redis.conf
                path: redis.conf
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-master-pvc
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999

---
# PostgreSQL Master Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flashmm-postgres-master
  namespace: flashmm
  labels:
    app: postgres
    role: master
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: flashmm-platform
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: postgres
      role: master
  template:
    metadata:
      labels:
        app: postgres
        role: master
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5432"
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_DB
              value: "flashmm_prod"
            - name: POSTGRES_USER
              value: "flashmm"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flashmm-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_REPLICATION_USER
              value: "replicator"
            - name: POSTGRES_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flashmm-secrets
                  key: POSTGRES_REPLICATION_PASSWORD
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
            - name: postgres-config
              mountPath: /etc/postgresql
              readOnly: true
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - flashmm
                - -d
                - flashmm_prod
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - flashmm
                - -d
                - flashmm_prod
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
      volumes:
        - name: postgres-config
          configMap:
            name: postgres-config
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-master-pvc
        - name: postgres-init
          configMap:
            name: postgres-init-scripts
      securityContext:
        runAsNonRoot: true
        runAsUser: 70
        runAsGroup: 70
        fsGroup: 70

---
# InfluxDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flashmm-influxdb
  namespace: flashmm
  labels:
    app: influxdb
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: flashmm-platform
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: influxdb
  template:
    metadata:
      labels:
        app: influxdb
        app.kubernetes.io/name: influxdb
        app.kubernetes.io/component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8086"
    spec:
      containers:
        - name: influxdb
          image: influxdb:2.7-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8086
              protocol: TCP
          env:
            - name: DOCKER_INFLUXDB_INIT_MODE
              value: "setup"
            - name: DOCKER_INFLUXDB_INIT_USERNAME
              value: "admin"
            - name: DOCKER_INFLUXDB_INIT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flashmm-secrets
                  key: INFLUXDB_ADMIN_PASSWORD
            - name: DOCKER_INFLUXDB_INIT_ORG
              value: "flashmm-prod"
            - name: DOCKER_INFLUXDB_INIT_BUCKET
              value: "metrics"
            - name: DOCKER_INFLUXDB_INIT_RETENTION
              value: "90d"
            - name: DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
              valueFrom:
                secretKeyRef:
                  name: flashmm-secrets
                  key: INFLUXDB_TOKEN
            - name: INFLUXD_LOG_LEVEL
              value: "error"
            - name: INFLUXD_REPORTING_DISABLED
              value: "true"
          volumeMounts:
            - name: influxdb-data
              mountPath: /var/lib/influxdb2
            - name: influxdb-config
              mountPath: /etc/influxdb2
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "8Gi"
              cpu: "4"
          livenessProbe:
            httpGet:
              path: /ping
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ping
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: influxdb-data
          persistentVolumeClaim:
            claimName: influxdb-pvc
        - name: influxdb-config
          emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000